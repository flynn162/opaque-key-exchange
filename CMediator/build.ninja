soname = libCMediator.so.0.1.0

c_include_flags = $
  -I/opt/swift/libopaque-0.99.7/include $
  -I/opt/swift/liboprf-0.4.0/include
ld_comptime_paths = $
  -L/opt/swift/libopaque-0.99.7/lib $
  `pkg-config --libs-only-L libsodium`
ld_runtime_paths = $
  -Wl,-rpath,/opt/swift/libopaque-0.99.7/lib

cc = gcc

warning_cflags = -Wall -Wextra -Werror $
  -Wbad-function-cast -Wcast-align=strict -Wcast-qual -Wmissing-include-dirs -Wpointer-arith -Wsign-conversion $
  -Wstrict-prototypes -Wundef

hardening_cflags = -D_FORTIFY_SOURCE=2 $
  -fcf-protection -fno-trampolines -fstack-clash-protection -fstack-protector-strong

sanitizer_shared_flags = -fno-omit-frame-pointer -fno-sanitize-recover -fsanitize=address,undefined

# Note: we use the same level of optimization for release and testing
common_cflags = -O2 -g -fPIC $warning_cflags $hardening_cflags $
  `pkg-config --cflags libsodium` $c_include_flags

# Disallow symbol overriding (semantic interposition) for release and test
release_cflags = $common_cflags -fno-plt -fno-semantic-interposition
test_cflags = $release_cflags -DUNIT_TESTING
# Temporarily allow symbol overriding for instrumentation/asan/ubsan
instrumentation_cflags = $common_cflags $sanitizer_shared_flags -DUNIT_TESTING

release_ldlibs = -lopaque `pkg-config --libs-only-l libsodium`
test_ldlibs = $release_ldlibs -lcmocka
instrumentation_ldlibs = $test_ldlibs

common_ldflags = -Wl,-soname,$soname $
  -Wl,--no-undefined -Wl,--no-as-needed -Wl,-z,relro,-z,now -Wl,--build-id $
  -Wl,--no-copy-dt-needed-entries $
  `pkg-config --libs-only-other libsodium` $
  $ld_comptime_paths $ld_runtime_paths

# Disallow symbol overriding (semantic interposition) for release and test
release_ldflags = $common_ldflags -Wl,-Bsymbolic -fvisibility=hidden
test_ldflags = $release_ldflags
# Temporarily allow symbol overriding for instrumentation/asan/ubsan
instrumentation_ldflags = $common_ldflags $sanitizer_shared_flags -Wl,--export-dynamic


# Quality assurance flags:

# - Stack protections:
# - Memcpy etc. bounds check (`-D_FORTIFY_SOURCE=2`)
# - ROP mitigations (`-fcf-protection -fno-trampolines`)
# - Guard page jumping mitigation (`-fstack-clash-protection`)
# - Stack canary (`-fstack-protector-strong`)


# Quality assurance linker flags:

# - Pass `-Wl,--no-undefined` to detect any missing -l flags at build time
# [Ref 1]: <https://stackoverflow.com/a/2356393>
# [Ref 2]: <https://stackoverflow.com/a/63981003>
# [Ref 3]: <https://wiki.gentoo.org/wiki/Project:Quality_Assurance/-Wl,-z,defs_and_-Wl,--no-allow-shlib-undefined>

# - Pass `-Wl,--no-as-needed` to ensure linking with the sodium library (disables "lazy" behavior)
# This option shall be used together with the previous option (`-Wl,--no-undefined`)
# [Ref 1]: <https://stackoverflow.com/a/62117174>
# Also disallows any unused/redundant `-l` flags
# [Ref 2]: <https://wiki.gentoo.org/wiki/Project:Quality_Assurance/As-needed>
# Use `ldd -r libCMediator.so` to verify

# - Full RELRO (`-Wl,-z,relro,-z,now`)
# Shown as `BIND_NOW` in `readelf -d` output
# [Ref]: <https://www.redhat.com/en/blog/hardening-elf-binaries-using-relocation-read-only-relro>

# - Emit a reproducible build ID (`-Wl,--build-id`)

# - Do not import symbols from secondary dependencies (`-Wl,--no-copy-dt-needed-entries`)
# [Ref]: <https://wiki.debian.org/ToolChain/DSOLinking>

# - The following options disallow resolution-order-based monkey patching:
# a) Per-shared-object:
# Turn on `DF_SYMBOLIC` in the ELF (ldflag `-Wl,-Bsymbolic`)
# ... so that the loader will try to resolve symbols in the current shared object (`.so`) first
# [Ref 1]: <https://refspecs.linuxbase.org/elf/gabi4+/ch5.dynamic.html>
# [Ref 2]: <https://linux.die.net/man/1/ld>
# [Ref 3]: <https://www.technovelty.org/c/what-exactly-does-bsymblic-do-update.html>
# b) Per-TU:
# Assume that LD_PRELOAD override functions implement the same semantics: (cflag `-fno-semantic-interposition`)
# This is an optimization flag.
# [Ref 4]: <https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html>

# - Make symbols private by default:
# Hide all symbols lacking an explicit visibility attribute (`-fvisibility=hidden`)


builddir = build

rule build_object
  description = Build release object: $in => $out
  command = $cc -std=c17 -c $release_cflags -o $out $in

rule build_object_test
  description = Build test object: $in => $out
  command = $cc -std=c17 -c $test_cflags -o $out $in

rule build_object_instrumentation
  description = Build instrumentation object: $in => $out
  command = $cc -std=c17 -c $instrumentation_cflags -o $out $in

rule build_so
  description = Build release library: $out
  # Link Order: The $ldlibs flag must appear AFTER the object files
  command = $cc -std=c17 -shared $release_ldflags -o $out $in $release_ldlibs

rule build_so_test
  description = Build executable for testing: $out
  # Link Order: The $ldlibs flag must appear AFTER the object files
  command = $cc -std=c17 $test_ldflags -o $out $in $test_ldlibs

rule build_so_instrumentation
  description = Build executable for instrumentation: $out
  # Link Order: The $ldlibs flags must appear AFTER the object files
  command = $cc -std=c17 $instrumentation_ldflags -o $out $in $instrumentation_ldlibs

rule create_symlink
  description = Create relative symlink: $out
  command = ln -sr --force $in $out

rule dump_config_release
  description = Dump release config to $out
  command = (echo cc: $cc "\n"; $
    echo release_cflags: $release_cflags "\n"; $
    echo release_ldflags: $release_ldflags "\n"; $
    echo release_ldlibs: $release_ldlibs "\n"; $
    echo ; $
    echo sha256: ; $
    sha256sum -- $in ; $
    echo END) 2>&1 1>$out

rule dump_config_test
  description = Dump test config to $out
  command = (echo cc: $cc "\n"; $
    echo test_cflags: $test_cflags "\n"; $
    echo test_ldflags: $test_ldflags "\n"; $
    echo test_ldlibs: $test_ldlibs "\n"; $
    echo ; $
    echo sha256: ; $
    sha256sum -- $in ; $
    echo END) 2>&1 1>$out

rule dump_config_instrumentation
  description = Dump instrumentation config to $out
  command = (echo cc: $cc "\n"; $
    echo instrumentation_cflags: $instrumentation_cflags "\n"; $
    echo instrumentation_ldflags: $instrumentation_ldflags "\n"; $
    echo instrumentation_ldlibs: $instrumentation_ldlibs "\n"; $
    echo ; $
    echo sha256: ; $
    sha256sum -- $in ; $
    echo END) 2>&1 1>$out

build $builddir/CMediator.o: build_object CMediator.c
build $builddir/test_CMediator.o: build_object_test CMediator.c
build $builddir/sanitize_CMediator.o: build_object_instrumentation CMediator.c

build $builddir/$soname: build_so $builddir/CMediator.o
build $builddir/test_libCMediator: build_so_test $builddir/test_CMediator.o
build $builddir/sanitize_libCMediator: build_so_instrumentation $builddir/sanitize_CMediator.o

build $builddir/libCMediator.so: create_symlink $builddir/$soname

build $builddir/release_config.log: dump_config_release $builddir/libCMediator.so $builddir/$soname
build $builddir/test_config.log: dump_config_test $builddir/test_libCMediator
build $builddir/instrumentation_config.log: dump_config_instrumentation $builddir/sanitize_libCMediator
